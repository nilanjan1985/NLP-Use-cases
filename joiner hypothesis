import pandas as pd 
import numpy as np 
import re 
import sys
import matplotlib.pyplot as plt
import json 
import numpy as np
import pandas as pd
##import re, nltk, spacy, string
##import en_core_web_sm
## nlp = en_core_web_sm.load()
import seaborn as sns
import matplotlib.pyplot as plt
%matplotlib inline
from plotly.offline import plot
import plotly.graph_objects as go
import plotly.express as px

from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from pprint import pprint

# hide warnings
import warnings
warnings.filterwarnings('ignore')


# set options
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)



df = pd.read_excel('C:/Users/JU486WK/OneDrive - EY\Desktop/Talent Hypothesis/GDS ES India_1.xlsx', sheet_name='Joiners data_Consolidated')

df_application = df[df['Application Status'] == 'Hired']

df_Application_Declined = df[(df['Application Status'] == 'Declined - Accepted Offer from Another Employer') | (df['Application Status'] == 'Declined - Accepted Counter Offer from Current Employer')] 

## Checking the Rank wise distribution ##
Application_Status_list = list(df_Application_Declined['Application Status'].unique())
Application_Status_list

## Distribution ##

for applicationlist in Application_Status_list:
    temp_df = df_Application_Declined[df_Application_Declined['Application Status'] == applicationlist]
    val = temp_df['Rank 1'].value_counts()
    rank_names = list(val.index)
    rank_count = list(val.values)
    #name = ["Gurgaon"]
    color_list = []
    for i in range(0,len(rank_names),2):
        color_list.append("Yellow")
        if i+1 != len(rank_names):
            color_list.append("gray")
    barchart = plt.bar(rank_names, rank_count, color = color_list)
    #plt.bar(name, city_count)
    for bc, name in zip(barchart, rank_names):
        dt1 = df_Application_Declined[df_Application_Declined['Application Status']== applicationlist]
        dt2 = dt1[dt1['Rank 1']==name] #'Uttar Pradesh']
        percentage = len(dt2)/len(dt1)  
        width = bc.get_width()
        height = bc.get_height()
        x, y = bc.get_xy()
        plt.text(x + width/3, y + height * 1, str(round(percentage* 100)) + '%', ha='center')
    plt.xticks(rotation=90)
    plt.title(applicationlist)
    plt.show()
rank_count

## Value Counts with Barplot

pct_series = df_final_status_joined['Sub serviceline'].value_counts(normalize=True)*100
count_series = pct_series = df_final_status_joined['Sub serviceline'].value_counts()
names = list(pct_series.index)[:10]
pct_list = list(pct_series.values)[:10]
count_list = list(count_series.values)[:10]
# count_list
# names = ["A", "B", "C", "D", "E", "F"]
# count_list = [100, 122, 98, 87, 10, 20]
# pct_list = [100, 122, 98, 87, 10, 20]
width = 0.75
fig, ax = plt.subplots()
width = 0.75
 
ax.barh(names, count_list, width, color = "green")
 
for i, v in enumerate(pct_list):
    ax.text(v + 3, i + .25, str(v),
            color = 'blue', fontweight = 'bold')
plt.xticks(rotation=90)
plt.show()
plt.show()

## Value counts with percentage

pct_series = df_final_status_joined['Sub serviceline'].value_counts(normalize=True)*100
count_series = df_final_status_joined['Sub serviceline'].value_counts()
names = list(pct_series.index)[:10]
pct_list = list(pct_series.values)[:10]
count_list = list(count_series.values)[:10]
plt.figure(figsize=(8,8))
#colors_list = ['Red','Orange', 'Blue', 'Purple']
color_list = []
for i in range(0,len(count_list),2):
    color_list.append("Yellow")
    if i+1 != len(count_list):
        color_list.append("gray")
graph = plt.bar(names,count_list,color=color_list)
plt.title('TITLE')
 
i = 0
for p in graph:
    width = p.get_width()
    height = p.get_height()
    x, y = p.get_xy()
    plt.text(x+width/2,
             y+height*1.01,
             str(round(pct_list[i],2))+'%',
             ha='center',
             weight='bold')
    i+=1
plt.xticks(rotation=90)

plt.show()
